#####################################################################
#   Macros
#####################################################################
[gcode_macro PROBE_CALIBRATE]
gcode:
    CARTOGRAPHER_CALIBRATE

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_BASE
gcode:
    QUAD_GANTRY_LEVEL_BASE horizontal_move_z=10 retry_tolerance=1.000
    QUAD_GANTRY_LEVEL_BASE horizontal_move_z=2

[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    #SET_FAN_SPEED FAN=Exhaust SPEED=0   ; turn exhaust fan off
    #SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    #SET_PIN PIN=caselight VALUE=0       ; turn case light off

[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    G28
    BED_MESH_CLEAR       # Clears old saved bed mesh (if any)
#    SMART_PARK
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro SFS_ENABLE]
description: Enable smart filament sensor
gcode:
  M117 ENABLING the Smart Filament Sensor
  G92 E0
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1 ; Put your filament sensor's name after SENSOR=

[gcode_macro SFS_DISABLE]
description: Disable smart filament sensor
gcode:
  M117 DISABLING the Smart Filament Sensor
  G92 E0
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0 ; Put your filament sensor's name after SENSOR=

[delayed_gcode DISABLEFILAMENTSENSOR] ; This will disable the SFS 1 second after klipper starts
initial_duration: 1
gcode:
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0 ; Put your filament sensor's name after SENSOR= 


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(30)|int %}                                                  ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}   ; set hotend temp variable for reference in resume macro

        SAVE_GCODE_STATE NAME=PAUSE                                                         ; save current print position for resume                
        BASE_PAUSE                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      ; check that zhop doesn't exceed z max
            G91                                                                             ; relative positioning
            G1 Z{z} F900                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                 ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                 ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F4500 ; park toolhead at front center
        SFS_DISABLE
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
#        M104 S0                                                                             ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                      ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        RESETRGB                                                                                                         ; reset LCD color
        SFS_ENABLE
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                      ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                                            ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                                         ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                                                              ; relative positioning
        M83                                                                                                              ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                                                    ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                                                         ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100                                                             ; restore position
        BASE_RESUME                                                                                                      ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro M600]
gcode:
    PAUSE

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:

# Parameters
    {% set BED_TEMP = params.BED|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|float %}

    {% set NOZZLE = params.NOZZLE|default("0.40")|float %}
    {% set CHAMBER_TEMP = params.CHAMBER|default("40")|float %}
    {% set MATERIAL = params.MATERIAL|string %}

    RESPOND MSG="Printing {MATERIAL} at {EXTRUDER_TEMP}"

  {% if MATERIAL == 'ASA' %}
    {% if NOZZLE == '0.40' %}
      CARTOGRAPHER_MODEL_SELECT NAME=textured_asa_040
      SET_PRESSURE_ADVANCE ADVANCE=0.021
    {% else %}
      CARTOGRAPHER_MODEL_SELECT NAME=textured_asa_060
      SET_PRESSURE_ADVANCE ADVANCE=0.024
    {% endif %}
    SET_DISPLAY_TEXT MSG="Buildplate Textured"  # Displays info
    RESPOND MSG="Buildplate: Textured"
  {% elif MATERIAL == 'PLA' %}
    {% if NOZZLE == '0.40' %}
      CARTOGRAPHER_MODEL_SELECT NAME=smooth_pla_040
      SET_PRESSURE_ADVANCE ADVANCE=0.021
    {% else %}
      CARTOGRAPHER_MODEL_SELECT NAME=smooth_pla_060
      SET_PRESSURE_ADVANCE ADVANCE=0.024
    {% endif %}
    SET_DISPLAY_TEXT MSG="Buildplate Smooth"  # Displays info
    RESPOND MSG="Buildplate: Smooth"
  {% else %}
    {% if NOZZLE == '0.40' %}
      CARTOGRAPHER_MODEL_SELECT NAME=textured_040
      SET_PRESSURE_ADVANCE ADVANCE=0.021
    {% else %}
      CARTOGRAPHER_MODEL_SELECT NAME=textured_060
      SET_PRESSURE_ADVANCE ADVANCE=0.024
    {% endif %}
    SET_DISPLAY_TEXT MSG="Buildplate Textured"  # Displays info
    RESPOND MSG="Buildplate: Textured"
  {% endif %}
    
# Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if BED_TEMP > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {BED_TEMP}c"           # Displays info
    RESPOND MSG="Setting Bed to: {BED_TEMP}c"
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    M190 S{BED_TEMP}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {38}c"  # Displays info
    RESPOND MSG="Heatsoak: {38}c"
    TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={38}  # Waits for chamber to reach desired temp
    SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target={55}

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {BED_TEMP}c"           # Displays info
    RESPOND MSG="Seting Bed to: {BED_TEMP}c"
    STATUS_HEATING                                      # Sets SB-leds to heating-mode

    M190 S{BED_TEMP}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    RESPOND MSG="Soak for 5min"
    G4 P300000                                          # Waits 5 min for the Bed Temperature to stabilize
    SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target={1}
  {% endif %}

    SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
    RESPOND MSG="Hotend 150c"

    M109 S150                                    # Heats the nozzle to 150c

    G32                            ; home all axes
    STATUS_MESHING
    BED_MESH_CALIBRATE
    G28 Z

    G90                            ; absolute positioning
    G1 Z20 F3000                   ; move nozzle away from bed

    # Heats up the nozzle up to target via data from slicer
    SET_DISPLAY_TEXT MSG="Hotend: {EXTRUDER_TEMP}c"             # Displays info
    RESPOND MSG="Setting Hotend to: {EXTRUDER_TEMP}c"
    STATUS_HEATING                                                # Sets SB-leds to heating-mode
    M107                                                          # Turns off partcooling fan
    M109 S{EXTRUDER_TEMP}                                       # Heats the nozzle to printing temp

    G1 E9.5 F3600                  ; extrude to get close to PRINT_END setting
    SFS_ENABLE
    STATUS_PRINTING

    VORON_PURGE


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:

    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 25, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                 ; retract filament
    SFS_DISABLE
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 20} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    SET_DISPLAY_TEXT MSG="Done printing file."
    RESPOND MSG="Done printing file."
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    STATUS_PART_READY

[gcode_macro DATA_SAMPLE]
gcode:
  M106 S255
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40
  M106 S0
  G28
  G0 Z1
  M104 S250
  M140 S110
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data1
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=70
  CARTOGRAPHER_STREAM FILENAME=data1
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40
  M106 S0
  G28 Z0
  G0 Z2
  M104 S250
  M140 S110
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data2
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=70
  CARTOGRAPHER_STREAM FILENAME=data2
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40
  M106 S0
  G28 Z0
  G0 Z3
  M104 S250
  M140 S110
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data3
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=70
  CARTOGRAPHER_STREAM FILENAME=data3
  M104 S0
  M140 S0
  M106 S255
  G0 Z80
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MAXIMUM=40
  M106 S0
  G28 Z0
  G0 Z5
  M104 S250
  M140 S110
  G4 P1000
  CARTOGRAPHER_STREAM FILENAME=data4
  TEMPERATURE_WAIT SENSOR='temperature_sensor cartographer_coil' MINIMUM=70
  CARTOGRAPHER_STREAM FILENAME=data4
  M104 S0
  M140 S0
